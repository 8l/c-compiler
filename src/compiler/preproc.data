

#define TWO 2

#define ONE 1


#ifndef _UTILS_H_
#define _UTILS_H_

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <malloc.h>

#define VERSION "0.0.1"     
#define RELEASE 0           
#define BUILD_NUMBER 51     
#define BUILD_DATE 20101231 

#define TRUE 1
#define FALSE 0
   

inline void usage(void);

inline void version(void);


inline char *scan_for_o(int argc, char *argv[]);

inline char **get_files_from_argv(int argc, char *argv[]);


int get_filesize(char *filename);


void *xmalloc(int size);


char fcpeek(FILE *f);


char *getword(FILE *i); 



char *wordpeek(FILE *f);

void file_error(char *prog, char *do_this, char *ifilename, char *specifics, char *msg);





#endif



#ifndef _PREPROCESSOR_H_
#define _PREPROCESSOR_H_

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "utils.h"



#define MAX_PREPROC_IDENT 2

#define PREPROC_DEFINE  0
#define PREPROC_INCLUDE 1

#define DEFAULT_INC_DIR "/usr/include/"
#define DEFAULT_LIB_DIR "/usr/lib/"

char *sys_inc_dir;
char *sys_lib_dir;


void run_preporcessor(const char *prog, const char *ifilename, const char *ofilename);



void include_headers(const char *prog, const char *ifilename, const char *ofilename);

void remove_comments(const char *prog, const char *filename);


char *get_inc_fname(char *n);

char *get_define_value(char *line);


#endif





#ifndef _STDIO_H

#if !defined __need_FILE && !defined __need___FILE
# define _STDIO_H	1
# include <features.h>

__BEGIN_DECLS

# define __need_size_t
# define __need_NULL
# include <stddef.h>

# include <bits/types.h>
# define __need_FILE
# define __need___FILE
#endif 


#if !defined __FILE_defined && defined __need_FILE


struct _IO_FILE;

__BEGIN_NAMESPACE_STD

typedef struct _IO_FILE FILE;
__END_NAMESPACE_STD
#if defined __USE_LARGEFILE64 || defined __USE_SVID || defined __USE_POSIX \
    || defined __USE_BSD || defined __USE_ISOC99 || defined __USE_XOPEN \
    || defined __USE_POSIX2
__USING_NAMESPACE_STD(FILE)
#endif

# define __FILE_defined	1
#endif 
#undef	__need_FILE


#if !defined ____FILE_defined && defined __need___FILE


typedef struct _IO_FILE __FILE;

# define ____FILE_defined	1
#endif 
#undef	__need___FILE


#ifdef	_STDIO_H
#define _STDIO_USES_IOSTREAM

#include <libio.h>

#if defined __USE_XOPEN || defined __USE_XOPEN2K8
# ifdef __GNUC__
#  ifndef _VA_LIST_DEFINED
typedef _G_va_list va_list;
#   define _VA_LIST_DEFINED
#  endif
# else
#  include <stdarg.h>
# endif
#endif

#ifdef __USE_XOPEN2K8
# ifndef __off_t_defined
# ifndef __USE_FILE_OFFSET64
typedef __off_t off_t;
# else
typedef __off64_t off_t;
# endif
# define __off_t_defined
# endif
# if defined __USE_LARGEFILE64 && !defined __off64_t_defined
typedef __off64_t off64_t;
# define __off64_t_defined
# endif

# ifndef __ssize_t_defined
typedef __ssize_t ssize_t;
# define __ssize_t_defined
# endif
#endif


__BEGIN_NAMESPACE_STD
#ifndef __USE_FILE_OFFSET64
typedef _G_fpos_t fpos_t;
#else
typedef _G_fpos64_t fpos_t;
#endif
__END_NAMESPACE_STD
#ifdef __USE_LARGEFILE64
typedef _G_fpos64_t fpos64_t;
#endif


#define _IOFBF 0 		
#define _IOLBF 1		
#define _IONBF 2		



#ifndef BUFSIZ
# define BUFSIZ _IO_BUFSIZ
#endif



#ifndef EOF
# define EOF (-1)
#endif



#define SEEK_SET	0	
#define SEEK_CUR	1	
#define SEEK_END	2	


#if defined __USE_SVID || defined __USE_XOPEN

# define P_tmpdir	"/tmp"
#endif



#include <bits/stdio_lim.h>



extern struct _IO_FILE *stdin;		
extern struct _IO_FILE *stdout;		
extern struct _IO_FILE *stderr;		

#define stdin stdin
#define stdout stdout
#define stderr stderr

__BEGIN_NAMESPACE_STD

extern int remove (__const char *__filename) __THROW;

extern int rename (__const char *__old, __const char *__new) __THROW;
__END_NAMESPACE_STD

#ifdef __USE_ATFILE

extern int renameat (int __oldfd, __const char *__old, int __newfd,
		     __const char *__new) __THROW;
#endif

__BEGIN_NAMESPACE_STD

#ifndef __USE_FILE_OFFSET64
extern FILE *tmpfile (void) __wur;
#else
# ifdef __REDIRECT
extern FILE *__REDIRECT (tmpfile, (void), tmpfile64) __wur;
# else
#  define tmpfile tmpfile64
# endif
#endif

#ifdef __USE_LARGEFILE64
extern FILE *tmpfile64 (void) __wur;
#endif


extern char *tmpnam (char *__s) __THROW __wur;
__END_NAMESPACE_STD

#ifdef __USE_MISC

extern char *tmpnam_r (char *__s) __THROW __wur;
#endif


#if defined __USE_SVID || defined __USE_XOPEN

extern char *tempnam (__const char *__dir, __const char *__pfx)
     __THROW __attribute_malloc__ __wur;
#endif


__BEGIN_NAMESPACE_STD

extern int fclose (FILE *__stream);

extern int fflush (FILE *__stream);
__END_NAMESPACE_STD

#ifdef __USE_MISC

extern int fflush_unlocked (FILE *__stream);
#endif

#ifdef __USE_GNU

extern int fcloseall (void);
#endif


__BEGIN_NAMESPACE_STD
#ifndef __USE_FILE_OFFSET64

extern FILE *fopen (__const char *__restrict __filename,
		    __const char *__restrict __modes) __wur;

extern FILE *freopen (__const char *__restrict __filename,
		      __const char *__restrict __modes,
		      FILE *__restrict __stream) __wur;
#else
# ifdef __REDIRECT
extern FILE *__REDIRECT (fopen, (__const char *__restrict __filename,
				 __const char *__restrict __modes), fopen64)
  __wur;
extern FILE *__REDIRECT (freopen, (__const char *__restrict __filename,
				   __const char *__restrict __modes,
				   FILE *__restrict __stream), freopen64)
  __wur;
# else
#  define fopen fopen64
#  define freopen freopen64
# endif
#endif
__END_NAMESPACE_STD
#ifdef __USE_LARGEFILE64
extern FILE *fopen64 (__const char *__restrict __filename,
		      __const char *__restrict __modes) __wur;
extern FILE *freopen64 (__const char *__restrict __filename,
			__const char *__restrict __modes,
			FILE *__restrict __stream) __wur;
#endif

#ifdef	__USE_POSIX

extern FILE *fdopen (int __fd, __const char *__modes) __THROW __wur;
#endif

#ifdef	__USE_GNU

extern FILE *fopencookie (void *__restrict __magic_cookie,
			  __const char *__restrict __modes,
			  _IO_cookie_io_functions_t __io_funcs) __THROW __wur;
#endif

#ifdef __USE_XOPEN2K8

extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  __THROW __wur;


extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __THROW __wur;
#endif


__BEGIN_NAMESPACE_STD

extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __THROW;

extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
		    int __modes, size_t __n) __THROW;
__END_NAMESPACE_STD

#ifdef	__USE_BSD

extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
		       size_t __size) __THROW;


extern void setlinebuf (FILE *__stream) __THROW;
#endif


__BEGIN_NAMESPACE_STD

extern int fprintf (FILE *__restrict __stream,
		    __const char *__restrict __format, ...);

extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
		    __const char *__restrict __format, ...) __THROW;


extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
		     _G_va_list __arg);

extern int vprintf (__const char *__restrict __format, _G_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
		     _G_va_list __arg) __THROW;
__END_NAMESPACE_STD

#if defined __USE_BSD || defined __USE_ISOC99 || defined __USE_UNIX98
__BEGIN_NAMESPACE_C99

extern int snprintf (char *__restrict __s, size_t __maxlen,
		     __const char *__restrict __format, ...)
     __THROW __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
		      __const char *__restrict __format, _G_va_list __arg)
     __THROW __attribute__ ((__format__ (__printf__, 3, 0)));
__END_NAMESPACE_C99
#endif

#ifdef __USE_GNU

extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
		      _G_va_list __arg)
     __THROW __attribute__ ((__format__ (__printf__, 2, 0))) __wur;
extern int __asprintf (char **__restrict __ptr,
		       __const char *__restrict __fmt, ...)
     __THROW __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
extern int asprintf (char **__restrict __ptr,
		     __const char *__restrict __fmt, ...)
     __THROW __attribute__ ((__format__ (__printf__, 2, 3))) __wur;
#endif

#ifdef __USE_XOPEN2K8

extern int vdprintf (int __fd, __const char *__restrict __fmt,
		     _G_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));
#endif


__BEGIN_NAMESPACE_STD

extern int fscanf (FILE *__restrict __stream,
		   __const char *__restrict __format, ...) __wur;

extern int scanf (__const char *__restrict __format, ...) __wur;

extern int sscanf (__const char *__restrict __s,
		   __const char *__restrict __format, ...) __THROW;

#if defined __USE_ISOC99 && !defined __USE_GNU \
    && (!defined __LDBL_COMPAT || !defined __REDIRECT) \
    && (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)
# ifdef __REDIRECT

extern int __REDIRECT (fscanf, (FILE *__restrict __stream,
				__const char *__restrict __format, ...),
		       __isoc99_fscanf) __wur;
extern int __REDIRECT (scanf, (__const char *__restrict __format, ...),
		       __isoc99_scanf) __wur;
extern int __REDIRECT_NTH (sscanf, (__const char *__restrict __s,
				    __const char *__restrict __format, ...),
			   __isoc99_sscanf);
# else
extern int __isoc99_fscanf (FILE *__restrict __stream,
			    __const char *__restrict __format, ...) __wur;
extern int __isoc99_scanf (__const char *__restrict __format, ...) __wur;
extern int __isoc99_sscanf (__const char *__restrict __s,
			    __const char *__restrict __format, ...) __THROW;
#  define fscanf __isoc99_fscanf
#  define scanf __isoc99_scanf
#  define sscanf __isoc99_sscanf
# endif
#endif

__END_NAMESPACE_STD

#ifdef	__USE_ISOC99
__BEGIN_NAMESPACE_C99

extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
		    _G_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __wur;


extern int vscanf (__const char *__restrict __format, _G_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __wur;


extern int vsscanf (__const char *__restrict __s,
		    __const char *__restrict __format, _G_va_list __arg)
     __THROW __attribute__ ((__format__ (__scanf__, 2, 0)));

# if !defined __USE_GNU \
     && (!defined __LDBL_COMPAT || !defined __REDIRECT) \
     && (defined __STRICT_ANSI__ || defined __USE_XOPEN2K)
#  ifdef __REDIRECT

extern int __REDIRECT (vfscanf,
		       (FILE *__restrict __s,
			__const char *__restrict __format, _G_va_list __arg),
		       __isoc99_vfscanf)
     __attribute__ ((__format__ (__scanf__, 2, 0))) __wur;
extern int __REDIRECT (vscanf, (__const char *__restrict __format,
				_G_va_list __arg), __isoc99_vscanf)
     __attribute__ ((__format__ (__scanf__, 1, 0))) __wur;
extern int __REDIRECT_NTH (vsscanf,
			   (__const char *__restrict __s,
			    __const char *__restrict __format,
			    _G_va_list __arg), __isoc99_vsscanf)
     __attribute__ ((__format__ (__scanf__, 2, 0)));
#  else
extern int __isoc99_vfscanf (FILE *__restrict __s,
			     __const char *__restrict __format,
			     _G_va_list __arg) __wur;
extern int __isoc99_vscanf (__const char *__restrict __format,
			    _G_va_list __arg) __wur;
extern int __isoc99_vsscanf (__const char *__restrict __s,
			     __const char *__restrict __format,
			     _G_va_list __arg) __THROW;
#   define vfscanf __isoc99_vfscanf
#   define vscanf __isoc99_vscanf
#   define vsscanf __isoc99_vsscanf
#  endif
# endif

__END_NAMESPACE_C99
#endif 


__BEGIN_NAMESPACE_STD

extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);


extern int getchar (void);
__END_NAMESPACE_STD


#define getc(_fp) _IO_getc (_fp)

#if defined __USE_POSIX || defined __USE_MISC

extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
#endif 

#ifdef __USE_MISC

extern int fgetc_unlocked (FILE *__stream);
#endif 


__BEGIN_NAMESPACE_STD

extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);


extern int putchar (int __c);
__END_NAMESPACE_STD


#define putc(_ch, _fp) _IO_putc (_ch, _fp)

#ifdef __USE_MISC

extern int fputc_unlocked (int __c, FILE *__stream);
#endif 

#if defined __USE_POSIX || defined __USE_MISC

extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);
#endif 


#if defined __USE_SVID || defined __USE_MISC \
    || (defined __USE_XOPEN && !defined __USE_XOPEN2K)

extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);
#endif


__BEGIN_NAMESPACE_STD

extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     __wur;


extern char *gets (char *__s) __wur;
__END_NAMESPACE_STD

#ifdef __USE_GNU

extern char *fgets_unlocked (char *__restrict __s, int __n,
			     FILE *__restrict __stream) __wur;
#endif


#ifdef	__USE_XOPEN2K8

extern _IO_ssize_t __getdelim (char **__restrict __lineptr,
			       size_t *__restrict __n, int __delimiter,
			       FILE *__restrict __stream) __wur;
extern _IO_ssize_t getdelim (char **__restrict __lineptr,
			     size_t *__restrict __n, int __delimiter,
			     FILE *__restrict __stream) __wur;


extern _IO_ssize_t getline (char **__restrict __lineptr,
			    size_t *__restrict __n,
			    FILE *__restrict __stream) __wur;
#endif


__BEGIN_NAMESPACE_STD

extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);


extern int puts (__const char *__s);



extern int ungetc (int __c, FILE *__stream);



extern size_t fread (void *__restrict __ptr, size_t __size,
		     size_t __n, FILE *__restrict __stream) __wur;

extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
		      size_t __n, FILE *__restrict __s);
__END_NAMESPACE_STD

#ifdef __USE_GNU

extern int fputs_unlocked (__const char *__restrict __s,
			   FILE *__restrict __stream);
#endif

#ifdef __USE_MISC

extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
			      size_t __n, FILE *__restrict __stream) __wur;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
			       size_t __n, FILE *__restrict __stream);
#endif


__BEGIN_NAMESPACE_STD

extern int fseek (FILE *__stream, long int __off, int __whence);

extern long int ftell (FILE *__stream) __wur;

extern void rewind (FILE *__stream);
__END_NAMESPACE_STD



#if defined __USE_LARGEFILE || defined __USE_XOPEN2K
# ifndef __USE_FILE_OFFSET64

extern int fseeko (FILE *__stream, __off_t __off, int __whence);

extern __off_t ftello (FILE *__stream) __wur;
# else
#  ifdef __REDIRECT
extern int __REDIRECT (fseeko,
		       (FILE *__stream, __off64_t __off, int __whence),
		       fseeko64);
extern __off64_t __REDIRECT (ftello, (FILE *__stream), ftello64);
#  else
#   define fseeko fseeko64
#   define ftello ftello64
#  endif
# endif
#endif

__BEGIN_NAMESPACE_STD
#ifndef __USE_FILE_OFFSET64

extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);

extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
#else
# ifdef __REDIRECT
extern int __REDIRECT (fgetpos, (FILE *__restrict __stream,
				 fpos_t *__restrict __pos), fgetpos64);
extern int __REDIRECT (fsetpos,
		       (FILE *__stream, __const fpos_t *__pos), fsetpos64);
# else
#  define fgetpos fgetpos64
#  define fsetpos fsetpos64
# endif
#endif
__END_NAMESPACE_STD

#ifdef __USE_LARGEFILE64
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) __wur;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);
#endif

__BEGIN_NAMESPACE_STD

extern void clearerr (FILE *__stream) __THROW;

extern int feof (FILE *__stream) __THROW __wur;

extern int ferror (FILE *__stream) __THROW __wur;
__END_NAMESPACE_STD

#ifdef __USE_MISC

extern void clearerr_unlocked (FILE *__stream) __THROW;
extern int feof_unlocked (FILE *__stream) __THROW __wur;
extern int ferror_unlocked (FILE *__stream) __THROW __wur;
#endif


__BEGIN_NAMESPACE_STD

extern void perror (__const char *__s);
__END_NAMESPACE_STD


#include <bits/sys_errlist.h>


#ifdef	__USE_POSIX

extern int fileno (FILE *__stream) __THROW __wur;
#endif 

#ifdef __USE_MISC

extern int fileno_unlocked (FILE *__stream) __THROW __wur;
#endif


#if (defined __USE_POSIX2 || defined __USE_SVID  || defined __USE_BSD || \
     defined __USE_MISC)

extern FILE *popen (__const char *__command, __const char *__modes) __wur;


extern int pclose (FILE *__stream);
#endif


#ifdef	__USE_POSIX

extern char *ctermid (char *__s) __THROW;
#endif 


#ifdef __USE_XOPEN

extern char *cuserid (char *__s);
#endif 


#ifdef	__USE_GNU
struct obstack;			


extern int obstack_printf (struct obstack *__restrict __obstack,
			   __const char *__restrict __format, ...)
     __THROW __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
			    __const char *__restrict __format,
			    _G_va_list __args)
     __THROW __attribute__ ((__format__ (__printf__, 2, 0)));
#endif 


#if defined __USE_POSIX || defined __USE_MISC



extern void flockfile (FILE *__stream) __THROW;


extern int ftrylockfile (FILE *__stream) __THROW __wur;


extern void funlockfile (FILE *__stream) __THROW;
#endif 

#if defined __USE_XOPEN && !defined __USE_XOPEN2K && !defined __USE_GNU

# define __need_getopt
# include <getopt.h>
#endif	


#ifdef __USE_EXTERN_INLINES
# include <bits/stdio.h>
#endif
#if __USE_FORTIFY_LEVEL > 0 && defined __extern_always_inline
# include <bits/stdio2.h>
#endif
#ifdef __LDBL_COMPAT
# include <bits/stdio-ldbl.h>
#endif

__END_DECLS

#endif 

#endif 
#include <stdlib.h>


#ifndef _MALLOC_H
#define _MALLOC_H 1

#include <features.h>
#include <stddef.h>
#include <stdio.h>
# define __malloc_ptr_t  void *


#define __malloc_size_t size_t
#define __malloc_ptrdiff_t ptrdiff_t

#ifdef __GNUC__

# define __MALLOC_P(args)	args __THROW

# define __MALLOC_PMT(args)	args

#else	

# define __MALLOC_P(args)	args
# define __MALLOC_PMT(args)	args

#endif	


__BEGIN_DECLS


extern void *malloc __MALLOC_P ((size_t __size)) __attribute_malloc__ __wur;


extern void *calloc __MALLOC_P ((size_t __nmemb, size_t __size))
       __attribute_malloc__ __wur;



extern void *realloc __MALLOC_P ((void *__ptr, size_t __size))
       __attribute_warn_unused_result__;


extern void free __MALLOC_P ((void *__ptr));


extern void cfree __MALLOC_P ((void *__ptr));


extern void *memalign __MALLOC_P ((size_t __alignment, size_t __size))
       __attribute_malloc__ __wur;


extern void *valloc __MALLOC_P ((size_t __size))
       __attribute_malloc__ __wur;


extern void * pvalloc __MALLOC_P ((size_t __size))
       __attribute_malloc__ __wur;


extern void *(*__morecore) __MALLOC_PMT ((ptrdiff_t __size));


extern void *__default_morecore __MALLOC_P ((ptrdiff_t __size))
       __attribute_malloc__;



struct mallinfo {
  int arena;    
  int ordblks;  
  int smblks;   
  int hblks;    
  int hblkhd;   
  int usmblks;  
  int fsmblks;  
  int uordblks; 
  int fordblks; 
  int keepcost; 
};


extern struct mallinfo mallinfo __MALLOC_P ((void));


#ifndef M_MXFAST
# define M_MXFAST  1	
#endif
#ifndef M_NLBLKS
# define M_NLBLKS  2	
#endif
#ifndef M_GRAIN
# define M_GRAIN   3	
#endif
#ifndef M_KEEP
# define M_KEEP    4	
#endif


#define M_TRIM_THRESHOLD    -1
#define M_TOP_PAD           -2
#define M_MMAP_THRESHOLD    -3
#define M_MMAP_MAX          -4
#define M_CHECK_ACTION      -5
#define M_PERTURB	    -6
#define M_ARENA_TEST	    -7
#define M_ARENA_MAX	    -8


extern int mallopt __MALLOC_P ((int __param, int __val));


extern int malloc_trim __MALLOC_P ((size_t __pad));


extern size_t malloc_usable_size __MALLOC_P ((void *__ptr));


extern void malloc_stats __MALLOC_P ((void));


extern int malloc_info (int __options, FILE *__fp);


extern void *malloc_get_state __MALLOC_P ((void));


extern int malloc_set_state __MALLOC_P ((void *__ptr));


extern void (*__malloc_initialize_hook) __MALLOC_PMT ((void));

extern void (*__free_hook) __MALLOC_PMT ((void *__ptr,
					__const __malloc_ptr_t));
extern void *(*__malloc_hook) __MALLOC_PMT ((size_t __size,
					     __const __malloc_ptr_t));
extern void *(*__realloc_hook) __MALLOC_PMT ((void *__ptr, size_t __size,
					      __const __malloc_ptr_t));
extern void *(*__memalign_hook) __MALLOC_PMT ((size_t __alignment,
					       size_t __size,
					       __const __malloc_ptr_t));
extern void (*__after_morecore_hook) __MALLOC_PMT ((void));


extern void __malloc_check_init __MALLOC_P ((void));


__END_DECLS

#endif 

